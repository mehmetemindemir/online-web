import * as actions from './actionTypes';import axios from '../../axios-instance'export const authStart=()=>{    return{        type:actions.AUTH_START    };};export const authSuccess=(_token)=>{    return{        type:actions.AUTH_SUCCESS,        token:_token,    };};export const authFail=(_error)=>{    return{        type:actions.AUTH_FAIL,        error:_error,    }}export const logout = () => {    localStorage.removeItem('token');    localStorage.removeItem('expirationDate');    return {        type: actions.AUTH_LOGOUT    };};export const checkAuthTimeout = (expirationTime) => {    return dispatch => {        setTimeout(() => {            dispatch(logout());        }, expirationTime * 1000);    };};export const setAuthRedirectPath = (path) => {    return {        type: actions.AUTH_REDIRECT_PATH,        path: path    };};export const auth=(userName,password)=>{    return dispatch=> {        dispatch(authStart());        const authData={            username:userName,            password:password,            appName:'web'        };        axios.post('login',authData)            .then(res=>{                const expirationDate = new Date(new Date().getTime() + res.data.tokenExpires*60* 1000);                localStorage.setItem('token', res.data.accessToken);                localStorage.setItem('expirationDate', expirationDate);                dispatch(authSuccess(res.data.accessToken));                dispatch(checkAuthTimeout(res.data.tokenExpires*60));            })            .catch(error=>{                dispatch(authFail(error));            })    }}export const authCheckState = () => {    return dispatch => {        const token = localStorage.getItem('token');        if (!token) {            dispatch(logout());        } else {            const expirationDate = new Date(localStorage.getItem('expirationDate'));            if (expirationDate <= new Date()) {                dispatch(logout());            } else {                dispatch(authSuccess(token));                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));            }        }    };};